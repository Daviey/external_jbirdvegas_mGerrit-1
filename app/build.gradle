buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.3'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'com.github.triplet.gradle:play-publisher:1.0.2'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile files('libs/android-support-v4.jar')
    compile files('libs/libGoogleAnalyticsServices.jar')
    compile files('libs/annotations.jar')
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.mcxiaoke.volley:library:1.0.10'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'joda-time:joda-time:2.7'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'
    compile 'se.emilsjolander:stickylistheaders:2.5.2'
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    // compile Using Java 7
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {
            // accept default file structure of android plugin
        }
    }
    signingConfigs {
        release {}
    }
    aaptOptions {
        failOnMissingConfigEntry true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFile 'proguard-project.txt'
            signingConfig signingConfigs.release
            lintOptions {
                abortOnError false
            }
        }
    }
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22
        versionCode VersionInfo.getVersionInfo().getVersionCode()
        versionName VersionInfo.getVersionInfo().toString()
        applicationId 'com.jbirdvegas.mgerrit'
    }
    productFlavors {
    }
}

// config the style checks to run during the testing phase
check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src'
    include "**/*.java"
    exclude "**/gen/**"
    classpath = files()
}

/*
 * If signing properties file is found then sign with release key
 */
def Properties props = new Properties()
def File signingFile = new File('signing.properties')

if (signingFile.exists()) {
    props.load(new FileInputStream(signingFile))
}
if (props.containsKey('storeFile') &&
        props.containsKey('storePassword') &&
        props.containsKey('keyAlias') &&
        props.containsKey('keyPassword')) {
    android.signingConfigs.release.storeFile = file(props['storeFile'])
    android.signingConfigs.release.storePassword = props['storePassword']
    android.signingConfigs.release.keyAlias = props['keyAlias']
    android.signingConfigs.release.keyPassword = props['keyPassword']
} else {
    android.buildTypes.release.signingConfig = null
}

/**
 * Bump versions for releases
 */
task incrementRevision << {
    VersionInfo versionInfo = VersionInfo.getVersionInfo()
    println(String.format("#Pre - VersionInfo{\n%s\n}", versionInfo.toString()))
    versionInfo.mRevision++
    println(String.format("#Post - VersionInfo{\n%s\n}", versionInfo.toString()))
    versionInfo.storeProperties()
    return versionInfo
}

incrementRevision.dependsOn 'clean'

/**
 * Holder class to hold, increment and persist versioning
 */
public class VersionInfo {
    public int mMajor;
    public int mMinor;
    public int mRevision;

    private static final String VERSION_FILE = 'version.properties'
    private static final String MAJOR = 'major'
    private static final String MINOR = 'minor'
    private static final String REVISION = 'revision'
    private static final String COMMENT = 'mGerrit release version'

    public static VersionInfo getVersionInfo() {
        Properties properties = new Properties()
        properties.load(new FileInputStream(new File(VERSION_FILE)))
        return new VersionInfo(properties.getProperty(MAJOR), properties.getProperty(MINOR), properties.getProperty(REVISION));
    }

    private VersionInfo(String maj, String min, String rev) {
        mMajor = Integer.parseInt(maj)
        mMinor = Integer.parseInt(min)
        mRevision = Integer.parseInt(rev)
    }

    public Properties storeProperties() {
        Properties properties = new Properties()
        properties.put(MAJOR, String.valueOf(mMajor))
        properties.put(MINOR, String.valueOf(mMinor))
        properties.put(REVISION, String.valueOf(mRevision))
        properties.store(new FileOutputStream(new File(VERSION_FILE)), COMMENT)
        return properties
    }

    @Override
    public String toString() {
        return String.format("%d.%d.%04d", mMajor, mMinor, mRevision)
    }

    public int getVersionCode() {
        return Integer.parseInt(String.format("%d%d%04d", mMajor, mMinor, mRevision))
    }
}