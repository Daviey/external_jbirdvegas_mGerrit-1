buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.0'
        classpath 'org.ajoberstar:gradle-git:1.1.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'org.apache.commons:commons-lang3:3.4'
    }
}


import org.ajoberstar.grgit.Branch
import org.ajoberstar.grgit.Credentials
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.operation.BranchListOp
import org.eclipse.jgit.util.StringUtils

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
}

dependencies {
    compile files('libs/android-support-v4.jar')
    compile files('libs/annotations.jar')
    compile files('libs/libGoogleAnalyticsServices.jar')

    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.mcxiaoke.volley:library:1.0.12'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'joda-time:joda-time:2.7'
    compile 'org.ajoberstar:gradle-git:1.1.0'
    compile 'se.emilsjolander:stickylistheaders:2.5.2'
}
def versionHolder

/* This can be null, if private.creds is empty or does not exists be sure to check before accessing */

// github account user name
def String gitUsername
// github user password
def String gitPassword
// Release signing keystore file
def String keyStoreFile
// Release signing keystore password
def String keyStorePass
// Release signing alias
def String keyStoreAlias
// Release signing alias password
def String keyStoreAliasPass

// Cannot be null
def File  versionPropsFile = new File(project.rootDir, 'version.properties')
/**
 * Git client used during releases to increment version, commit, create a tag and push the result
 * to 'refs/heads/master'
 */
def grgit

// setup
try {
    def Properties props = new Properties()
    def File credsFile = new File("${project.rootDir}/private.creds")
    props.load(new FileInputStream(credsFile))
    gitUsername = props['gitUsername']
    gitPassword = props['gitPassword']
    keyStoreFile = props['keyStoreFile']
    keyStorePass = props['keyStorePass']
    keyStoreAlias = props['keyStoreAlias']
    keyStoreAliasPass = props['keyStoreAliasPass']
    grgit = Grgit.open(project.rootDir, new Credentials(gitUsername.toString(), gitPassword.toString()))
} catch (Exception e) {
    println "Credentials file not found {private.creds} Releases will fail fast, as long as you don't attempt" +
            " a release build is fail-safe."
    e.printStackTrace()
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    // compile Using Java 7
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {}
    }
    signingConfigs {
        release {}
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFile 'proguard-project.txt'
            signingConfig signingConfigs.release

        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'plugin.properties'
    }
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        String full = versionProps['version'].toString()
        versionHolder = full
        if (project.hasProperty('incrementVersion') && incrementVersion) {
            String[] parts = full.split('\\.')
            println("Original version: " + parts.toString())
            parts[parts.length - 1] = parts[parts.length - 1].toInteger() + 1
            versionProps.put('version', StringUtils.join(Arrays.asList(parts), '.'))
            println("Incremented version: " + parts.toString())
            StringBuilder builder = new StringBuilder()
            for (int i = 0; i < parts.length; i++) {
                if (i == 0) {
                    builder.append(parts[i])
                } else {
                    builder.append(String.format("%03d", parts[i].toInteger()))
                }
            }
            FileOutputStream outStream = null;
            try {
                versionProps.store(new FileOutputStream(versionPropsFile), "mGerrit release version")
                versionHolder = builder.toString()
            } finally {
                if (outStream != null) {
                    outStream.close()
                }
            }
        }

        defaultConfig {
            versionCode versionHolder.replaceAll("\\.", "").toInteger()
            versionName versionHolder
            minSdkVersion 15
            targetSdkVersion 22
            println("versionCode: $versionCode versionName: $versionName")
        }
    } else {
        throw new GradleException("Fatal: Could not read version.properties!")
    }
}

if (keyStoreFile != null && new File(keyStoreFile).exists() &&
        keyStorePass != null &&  keyStoreAlias != null &&
        keyStoreAliasPass != null) {
    android.signingConfigs.release.storeFile = file(keyStoreFile)
    android.signingConfigs.release.storePassword = keyStorePass
    android.signingConfigs.release.keyAlias = keyStoreAlias
    android.signingConfigs.release.keyPassword = keyStoreAliasPass
} else {
    android.buildTypes.release.signingConfig = null
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src'
    include "**/*.java"
    exclude "**/gen/**"
    classpath = files()
}

task commitFiles << {
    /**
     * Checkout master branch, if branch does not exist create the branch
     */
    def branchName = 'mgerrit.org-jenkins-bot'
    def branchExists
    def branches = grgit.branch.list(mode: BranchListOp.Mode.LOCAL)
    for (Branch branch : branches) {
        if (branch.name.equals(branchName)) {
            branchExists = true
        }
    }

    if (branchExists) {
        grgit.checkout(branch: branchName)
    } else {
        grgit.checkout(branch: branchName, createBranch: true)
    }
    println getCurrentBranch()
    if (versionPropsFile.exists() && versionPropsFile.canRead()) {
        grgit.add(patterns: ['.'])
        println "Grgit status: " + grgit.status()
        grgit.commit(message: "Update version to latest build: ${versionHolder}", amend: false)
        println "Grgit status: " + grgit.status()
        String message = "Release of v${versionHolder}"
        // push tags
        grgit.tag.add(name: "v${versionHolder}", message: message)
    } else {
        throw new GradleException("FATAL: Missing ${project.rootDir.absolutePath}/version.properties")
    }
}

task push << {
    grgit.push()
    grgit.merge(head: 'master')
    String branchName = getCurrentBranch()
    grgit.checkout(branch: 'master')
    grgit.merge(head: branchName)
    grgit.push()

}

/**
 * Gets the name of the current git branch
 * @return
 *      git branch name
 */
def String getCurrentBranch() {
    return Grgit.open(project.rootDir).branch.getCurrent().getName()
}

task fullRelease << {
    // just an anchor for complete release builds
}

// config the style checks to run during the testing phase
check.dependsOn 'checkstyle'
commitFiles.dependsOn 'clean', 'build'
push.dependsOn 'commitFiles'
fullRelease.dependsOn 'push'
