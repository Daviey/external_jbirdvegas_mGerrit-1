buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.0'
        classpath 'org.ajoberstar:gradle-git:1.1.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
}

dependencies {
    compile files('libs/android-support-v4.jar')
    compile files('libs/annotations.jar')
    compile files('libs/libGoogleAnalyticsServices.jar')

    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.mcxiaoke.volley:library:1.0.12'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'joda-time:joda-time:2.7'
    compile 'org.ajoberstar:gradle-git:1.1.0'
    compile 'se.emilsjolander:stickylistheaders:2.5.2'
}
def versionHolder
def releaseTag = '-RELEASE'

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    // compile Using Java 7
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            resources.srcDirs = ['res']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
    signingConfigs {
        release {}
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFile 'proguard-project.txt'
            signingConfig signingConfigs.release

        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'plugin.properties'
    }
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        String full = versionProps['version'].toString()
        versionHolder = full
        if (project.hasProperty('incrementVersion')) {
            if (incrementVersion) {
                String[] parts = full.split('\\.')
                println("Original version: " + parts.toString())
                parts[parts.length - 1] = parts[parts.length - 1].toInteger() + 1
                println("Incremented version: " + parts.toString())
                StringBuilder builder = new StringBuilder()
                for (int i = 0; i < parts.length; i++) {
                    if (i == 0) {
                        builder.append(parts[i])
                    } else {
                        builder.append(String.format("%03d", parts[i].toInteger()))
                    }
                }
                versionProps.store(new FileOutputStream(versionPropsFile), "mGerrit release version")
                versionHolder = builder.toString()
            }
        }

        defaultConfig {
            versionCode versionHolder.replaceAll("\\.", "").toInteger()
            versionName versionHolder
            minSdkVersion 15
            targetSdkVersion 22
            println("versionCode: $versionCode versionName: $versionName")
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}

// config the style checks to run during the testing phase
check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src'
    include "**/*.java"
    exclude "**/gen/**"
    classpath = files()
}

def Properties props = new Properties()
def File signingFile = new File('signing.properties')

if (signingFile.exists()) {
    props.load(new FileInputStream(signingFile))
}
if (props.containsKey('storeFile') &&
        props.containsKey('storePassword') &&
        props.containsKey('keyAlias') &&
        props.containsKey('keyPassword')) {
    android.signingConfigs.release.storeFile = file(props['storeFile'])
    android.signingConfigs.release.storePassword = props['storePassword']
    android.signingConfigs.release.keyAlias = props['keyAlias']
    android.signingConfigs.release.keyPassword = props['keyPassword']
} else {
    android.buildTypes.release.signingConfig = null
}

import org.ajoberstar.grgit.*

task tagRelease << {
    def grgit = Grgit.open(project.file('.'))
    String message = "Release of v${versionHolder}"
    grgit.tag.add(name: "v${versionHolder}", message: message)
    grgit.push(tags: true, refsOrSpecs: ["refs/tags/v${versionHolder}:refs/tags/v${versionHolder}"])
}

tagRelease.dependsOn 'clean', 'build', 'pushReleaseFiles'

task pushReleaseFiles << {
    def git = Grgit.open(project.file('.'))
    Set<String> paths = new TreeSet<>()
    paths.add(new File('version.properties').absolutePath)
    git.add(patterns: ['version.properties', project.file('.').getAbsolutePath()])
    git.commit(message: "Update version to latest build: ${versionHolder}")
    git.push(all:false, remote: 'origin')
}

def String getCurrentBranch() {
    return Grgit.open(project.file('.')).branch.getCurrent().getName()
}

task fullRelease << {
    // just an anchor for complete release builds
}

fullRelease.dependsOn 'pushReleaseFiles'
